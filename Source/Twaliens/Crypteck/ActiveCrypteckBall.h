// All rights reserved.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Actor.h"
#include "CrypteckBall.h"
#include "LifeComponent.h"
#include "Components/SphereComponent.h"
#include "ActiveCrypteckBall.generated.h"

UCLASS(Abstract)
class TWALIENS_API AActiveCrypteckBall : public AActor, public ICrypteckBall
{
	GENERATED_BODY()

private:
	void ConvertAngleToOrbitTime(float NewAngle);

protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

	/******************************/
	/*         COMPONENTS         */
	/******************************/

	UPROPERTY(VisibleDefaultsOnly, BlueprintReadWrite, Category = "ActiveCrypteckBall")
	class UStaticMeshComponent * Mesh;

	UPROPERTY(VisibleDefaultsOnly, BlueprintReadWrite, Category = "ActiveCrypteckBall")
	class USphereComponent * Collider;

	UPROPERTY(VisibleDefaultsOnly, BlueprintReadWrite, Category = "ActiveCrypteckBall")
	class ULifeComponent * Life;

	/******************************/
	/*         ORBIT DATA         */
	/******************************/

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "ActiveCrypteckBall")
	float DeltaTimeMultiplier;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "ActiveCrypteckBall")
	float WidthSpace;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "ActiveCrypteckBall")
	float HeightSpace;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "ActiveCrypteckBall")
	float InitialAngle;

	FVector OrbitCenter;

	float CurrentOrbitTime;

	float Angle;

	virtual void CreateOrbitNewPosition(FVector & Position) { unimplemented(); }

	void Orbit(float DeltaSeconds);

	/******************************/
	/*       MOVEMENT DATA        */
	/******************************/

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "ActiveCrypteckBall")
	float Speed;

	FVector TargetPosition;

	FVector DisplacementNormal;

	FVector TeleportPosition;

	virtual void Move(float DeltaSeconds) { unimplemented(); }

	virtual void SetPositionToAttackTeleport() { unimplemented(); }

	void Teleport(float DeltaSeconds);

	/******************************/
	/*          HIT DATA          */
	/******************************/

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "ActiveCrypteckBall")
	float HitDamage;

	void OnBallHit(const FHitResult & Hit);

	/******************************/
	/*        SUPPORT DATA        */
	/******************************/

	class ACrypteck * Crypteck;

	class ACryptecksLevel * Level;

	/******************************/
	/*       DISSOLVE DATA        */
	/******************************/

	bool DissolveFinished;

	void PrepareDissolveOperation();

	void Dissolve(float DeltaSeconds);

	void Undissolve(float DeltaSeconds);

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "ActiveCrypteckBall")
	float DissolveTotalTime;

	float DissolveCurrentTime;

	class UMaterialInstanceDynamic * DissolveMaterial;

	/******************************/
	/*         DEATH DATA         */
	/******************************/

	UFUNCTION()
	void OnDeath();
	FScriptDelegate DeathDelegate;

public:	
	// Sets default values for this actor's properties
	//Constructor generated by default in generated_uclass_body macro!!!
	AActiveCrypteckBall();

	// Called every frame
	virtual void Tick(float DeltaTime) override;

	void SetTarget(const FVector & Target);

	void Activate() override;

	virtual void EndPlay(const EEndPlayReason::Type EndPlayReason) override;

	FORCEINLINE ULifeComponent * GetSphereLifeComponent() { return Life; }
	FORCEINLINE void AddListenerToHPChanges(const FScriptDelegate & Delegate) { Life->AddDelegateToHPUpdate(Delegate); }
	FORCEINLINE void AddListenerToSphereDeath(const FScriptDelegate & Delegate) { Life->AddDelegateToDeath(Delegate); }
	FORCEINLINE void RemoveListenerToHPChanges(const FScriptDelegate & Delegate) { Life->RemoveDelegateFromHPUpdate(Delegate); }
	FORCEINLINE void RemoveListenerToSphereDeath(const FScriptDelegate & Delegate) { Life->RemoveDelegateFromDeath(Delegate); }
	FORCEINLINE void RemoveAllListenerToHPChanges() { Life->RemoveAllDelegatesFromHPUpdate(); }
	FORCEINLINE void RemoveAllListenerToSphereDeath() { Life->RemoveAllDelegatesFromDeath(); }
	FORCEINLINE void SetOrbitCenter(FVector NewOrbitCenter) { OrbitCenter = NewOrbitCenter; }
	FORCEINLINE FVector GetOrbitCenter() const { return OrbitCenter; }
	FORCEINLINE void SetInitialAngle(float NewInitialAngle) { InitialAngle = NewInitialAngle; }
	FORCEINLINE float GetInitialAngle() const { return InitialAngle; }
	FORCEINLINE bool GetBallIsInOrbit() const { return State == IDLE; }
	FORCEINLINE float GetCurrentOrbitAngle() const { return Angle; }
	FORCEINLINE void SetCryptecksReference(class ACrypteck * Reference) { Crypteck = Reference; }
	FORCEINLINE float GetSphereRadius() const { return Collider->GetScaledSphereRadius(); }
	FORCEINLINE bool IsDoingItsAction() const {
		return State != ICrypteckBall::DEACTIVATED && State != ICrypteckBall::DISSOLVE_PRE_GOTO_ORBIT && State != ICrypteckBall::TELEPORT_TO_ORBIT && State != ICrypteckBall::IDLE && State != ICrypteckBall::RETURNING;
	}
};
